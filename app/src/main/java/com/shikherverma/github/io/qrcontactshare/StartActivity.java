package com.shikherverma.github.io.qrcontactshare;

import android.app.AlertDialog;
import android.content.ContentProviderOperation;
import android.content.DialogInterface;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import android.widget.SimpleCursorAdapter;
import android.widget.Toast;
import android.provider.ContactsContract.Contacts;
import android.provider.ContactsContract.CommonDataKinds.*;

import com.dm.zbar.android.scanner.ZBarConstants;
import com.dm.zbar.android.scanner.ZBarScannerActivity;

import java.util.ArrayList;

public class StartActivity extends ActionBarActivity
{

	private static final int ZBAR_SCANNER_REQUEST = 0;
	private static final int ZBAR_QR_SCANNER_REQUEST = 1;
	private static final int PICK_CONTACT_REQUEST = 2;  // The request code
	String number;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_start);
	}

	public void onScan(View v)
	{
		if (isCameraAvailable())
		{
			Intent intent = new Intent(this, ZBarScannerActivity.class);
			startActivityForResult(intent, ZBAR_SCANNER_REQUEST);
		}
		else
		{
			Toast.makeText(this, "Rear Facing Camera Unavailable", Toast.LENGTH_SHORT).show();
		}
	}

	public void startQR(String s)
	{
		Intent i = new Intent(this, QRcode.class);
		i.putExtra("info", s);
		startActivity(i);
	}

	public boolean isCameraAvailable()
	{
		PackageManager pm = getPackageManager();
		return pm.hasSystemFeature(PackageManager.FEATURE_CAMERA);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data)
	{
		switch (requestCode)
		{
			case ZBAR_SCANNER_REQUEST:
			case ZBAR_QR_SCANNER_REQUEST:
				if (resultCode == RESULT_OK)
				{
					String temp = data.getStringExtra(ZBarConstants.SCAN_RESULT);
					saveContact(temp);
				}
				else if (resultCode == RESULT_CANCELED && data != null)
				{
					String error = data.getStringExtra(ZBarConstants.ERROR_INFO);
					if (!TextUtils.isEmpty(error))
					{
						Toast.makeText(this, error, Toast.LENGTH_SHORT).show();
					}
				}
				break;
			case PICK_CONTACT_REQUEST:
				if (resultCode == RESULT_OK)
				{
					Uri contactUri = data.getData();
					String phoneNumber = getNumber(contactUri);
					String name = getContactName(contactUri);
					startQR(">\n"+name+"\n"+phoneNumber+"\n");
				}
				break;
		}
	}

	private String getContactName(Uri uriContact)
	{
		String contactName = null;
		Cursor cursor = getContentResolver().query(uriContact, null, null, null, null);
		if (cursor.moveToFirst())
		{
			contactName = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
		}
		cursor.close();
		return contactName;
	}

	public String getNumber(Uri contactUri)
	{
		String number = "";
		String[] projection = new String[]{Phone.NUMBER};
		Cursor cursor = getContentResolver().query(contactUri, projection,
				null, null, null);
		// If the cursor returned is valid, get the phone number
		if (cursor != null && cursor.moveToFirst())
		{
			int numberIndex = cursor.getColumnIndex(Phone.NUMBER);
			number = cursor.getString(numberIndex);
		}
		return number;
	}

	public void onGenerate(View view)
	{
		Intent pickContactIntent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
		pickContactIntent.setType(ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE); // Show user only contacts w/ phone numbers
		startActivityForResult(pickContactIntent, PICK_CONTACT_REQUEST);
		//startActivity(new Intent(getApplicationContext(), contactList.class));
	}

	void saveContact(String s)
	{
		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
		if (s.charAt(0)!='>')
		{
			//on scanning some other qr code
			Toast.makeText(this, "Please scan QR code generated by this app only", Toast.LENGTH_SHORT).show();
		}
		//------------------------------------------------------ Names
		else
		{
			String[] inputarray = s.split("\n");
			String check = inputarray[0];
			String DisplayName = inputarray[1];
			String MobileNumber = inputarray[2];
			/*String HomeNumber = inputarray[2];
			String WorkNumber = inputarray[3];
			String emailID = inputarray[4];
			String company = inputarray[5];
			String jobTitle = inputarray[6];*/
			number = MobileNumber;

				ops.add(ContentProviderOperation.newInsert(
					ContactsContract.RawContacts.CONTENT_URI)
					.withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
					.withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null)
					.build());

				if (DisplayName != null)
				{
					ops.add(ContentProviderOperation.newInsert(
						ContactsContract.Data.CONTENT_URI)
						.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
						.withValue(ContactsContract.Data.MIMETYPE,
								ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
						.withValue(
								ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
								DisplayName).build());
				}
				//------------------------------------------------------ Mobile Number
				if (MobileNumber != null)
				{
					ops.add(ContentProviderOperation.
						newInsert(ContactsContract.Data.CONTENT_URI)
						.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
						.withValue(ContactsContract.Data.MIMETYPE,
								ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
						.withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, MobileNumber)
						.withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
								ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE)
						.build());
				}
			alertbox("Contact Saved","Do you want to call "+DisplayName+" ?");
		}
		/*
		//------------------------------------------------------ Home Numbers
		if (HomeNumber != null)
		{
			ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
					.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
					.withValue(ContactsContract.Data.MIMETYPE,
							ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
					.withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, HomeNumber)
					.withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
							ContactsContract.CommonDataKinds.Phone.TYPE_HOME)
					.build());
		}

		//------------------------------------------------------ Work Numbers
		if (WorkNumber != null)
		{
			ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
					.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
					.withValue(ContactsContract.Data.MIMETYPE,
							ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
					.withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, WorkNumber)
					.withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
							ContactsContract.CommonDataKinds.Phone.TYPE_WORK)
					.build());
		}

		//------------------------------------------------------ Email
		if (emailID != null)
		{
			ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
					.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
					.withValue(ContactsContract.Data.MIMETYPE,
							ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
					.withValue(ContactsContract.CommonDataKinds.Email.DATA, emailID)
					.withValue(ContactsContract.CommonDataKinds.Email.TYPE, ContactsContract.CommonDataKinds.Email.TYPE_WORK)
					.build());
		}

		//------------------------------------------------------ Organization
		if (!company.equals("") && !jobTitle.equals(""))
		{
			ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
					.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
					.withValue(ContactsContract.Data.MIMETYPE,
							ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)
					.withValue(ContactsContract.CommonDataKinds.Organization.COMPANY, company)
					.withValue(ContactsContract.CommonDataKinds.Organization.TYPE, ContactsContract.CommonDataKinds.Organization.TYPE_WORK)
					.withValue(ContactsContract.CommonDataKinds.Organization.TITLE, jobTitle)
					.withValue(ContactsContract.CommonDataKinds.Organization.TYPE, ContactsContract.CommonDataKinds.Organization.TYPE_WORK)
					.build());
		}
		*/
		// Asking the Contact provider to create a new contact
		try
		{
			getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
		} catch (Exception e)
		{
			e.printStackTrace();
			Toast.makeText(this, "Exception: " + e.getMessage(), Toast.LENGTH_SHORT).show();
		}
	}

	public void initiateCall()
	{
		String uri = "tel:" + number ;
		Intent intent = new Intent(Intent.ACTION_CALL);
		intent.setData(Uri.parse(uri));
		startActivity(intent);
	}

	public void alertbox(String title, String message)
	{
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setMessage(message)
				.setTitle(title);

			builder.setPositiveButton("Call", new DialogInterface.OnClickListener()
			{
				public void onClick(DialogInterface dialog, int id)
				{
					initiateCall();
				}
			});

			builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener()
			{
				public void onClick(DialogInterface dialog, int id)
				{
					// User clicked cancel button
				}
			});
		AlertDialog alert = builder.create();
		alert.show();
	}
}

